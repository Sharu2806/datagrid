import React, { Component } from 'react';
import TopNavigation from './SideNavigation';
import SerialNoTextFields from './SerialNumberTextfields/serialnotextfields.js';


export default class App extends Component {

  constructor(props){
      super(props);
      this.state ={
        minval :{},
        maxval : {},
        allocno : {},
        isValidMinVal : false,
        isValidMaxVal : false,
        isValidAllocNo : {},
        maxIsGreater : {},
        tableData : [
          {rowTitle: 'Import Documentary Credits' , minID:'min_1', maxID:'max_1', allocID:'alloc_1',rowID:'row_1'},
          {rowTitle: 'Import Bill', minID:'min_2', maxID:'max_2', allocID:'alloc_2', rowID:'row_2'},
          {rowTitle: 'Import Shipping Guarantee', minID:'min_3', maxID:'max_3', allocID:'alloc_3',rowID:'row_3'},
          {rowTitle: 'Import Loan', minID:'min_4', maxID:'max_4', allocID:'alloc_4',rowID:'row_4'},
          {rowTitle: 'Import Marginal Deposit', minID:'min_5', maxID:'max_5', allocID:'alloc_5',rowID:'row_5'},
          {rowTitle: 'Export Bill', minID:'min_6', maxID:'max_6', allocID:'alloc_6',rowID:'row_6'},
          {rowTitle: 'Export Loan', minID:'min_7', maxID:'max_7', allocID:'alloc_7',rowID:'row_7'},
          {rowTitle: 'Export Marginal Deposit', minID:'min_8', maxID:'max_8', allocID:'alloc_8',rowID:'row_8'}
        ]

      }
      this.handleChangeOnVal = this.handleChangeOnVal.bind(this);
      this.onSubmitCreateSerialNo = this.onSubmitCreateSerialNo.bind(this);

  }

/* validation of all fields general */
  validateData(value){
    let isValid = false;
    if(value === '' || value === undefined || value === 'undefined'){
      isValid = false;
    }else if (value.length < 6 || value.length > 6) {
        isValid = false;
    }else{
      isValid = true;
    }
    return isValid;
  }
 /* validation of max val in splc case */
  validateMaxVal(id){
    if(this.state.maxIsGreater[id]){
      return true;
    }else{
      return false;
    }
  }
  /* validation of alloc in splc case */
  validateAllocNo(id){
    if(this.state.isValidAllocNo[id]){
      return true;
    }else{
      return false;
    }
  }

 /* On Change setting State */
  handleChangeOnVal(event){
    let value = event.target.value;
    let name = event.target.name;
    let id = event.target.id.slice(-1);

    if(name == "min_val"){
      let obj  = this.state.minval;
      obj[id] = value;
      this.setState({minval : obj});

    }else if(name == "max_val"){
        let obj  = this.state.maxval;
        let temp = this.state.maxIsGreater;
        if(value > this.state.minval[id]  && this.state.minval[id] != value){
          temp[id] = true;
        }else{
          temp[id] = false;
        }
        obj[id] = value;
        this.setState({maxval : obj});
        this.setState({maxIsGreater:temp});
    }else if(name == "alloc_no"){
        let obj  = this.state.allocno;
        let temp = this.state.isValidAllocNo;
        if(value >= this.state.minval[id] && value <= this.state.maxval[id]){
          temp[id] = true;
        }else{
          temp[id] = false;
        }
        obj[id] = value;
        this.setState({allocno : obj});
        this.setState({isValidAllocNo:temp});
    }
  }





 /* On submit Validation */
  onSubmitCreateSerialNo(){
    let data = [1,2,3,4,5,6,7,8];
    data.map((data)=>{


          let flag = false;
          if(this.state.minval.hasOwnProperty(data)){
              flag = this.validateData(this.state.minval[data]);
              document.getElementsByName('min_'+data)[0].innerText = flag ? '' : 'Missing Min Value.';
              document.getElementsByName('min_'+data)[0].className = flag ? 'hideError' : 'showError';
          }else{
              document.getElementsByName('min_'+data)[0].innerText ='Missing Min Value.';
              document.getElementsByName('min_'+data)[0].className = 'showError';
          }

          if(this.state.maxval.hasOwnProperty(data)){
              if(this.validateData(this.state.maxval[data])){
                flag = this.validateMaxVal([data]);
              }else{
                flag = false;
              }
              document.getElementsByName('max_'+data)[0].innerText = flag ? '' : 'The Max value must be greater than the Min value.';
              document.getElementsByName('max_'+data)[0].className = flag ? 'hideError' : 'showError';
          }else{
              document.getElementsByName('max_'+data)[0].innerText ='The Max value must be greater than the Min value.';
              document.getElementsByName('max_'+data)[0].className = 'showError';
          }

          if(this.state.allocno.hasOwnProperty(data)){
              if(this.validateData(this.state.allocno[data])){
                flag = this.validateAllocNo(data);
                document.getElementsByName('alloc_'+data)[0].innerText = flag ? '' : 'The last No alloc must be between min value and max value.';
              }else{
                flag = false;
                document.getElementsByName('alloc_'+data)[0].innerText = 'Missing Last No. Alloc.';
              }
              document.getElementsByName('alloc_'+data)[0].className = flag ? 'hideError' : 'showError';
          }else{
              document.getElementsByName('alloc_'+data)[0].innerText ='Missing Last No. Alloc.';
              document.getElementsByName('alloc_'+data)[0].className = 'showError';
          }


    });


  // isNumeric(evt){
  //     var theEvent = evt || window.event;
  //     var key = theEvent.keyCode || theEvent.which;
  //     key = String.fromCharCode (key);
  //     var regex = /[0-9]|\./;
  //     if ( !regex.test(key) ) {
  //       theEvent.returnValue = false;
  //       if(theEvent.preventDefault) theEvent.preventDefault();
  //     }
  //   }
  //
  // maxLengthCheck(object) {
  //   if (object.value.length > object.maxLength)
  //     object.value = object.value.slice(0, object.maxLength)
  //  }

  }
  render() {


 // const tableData = [
 //   {rowTitle: 'Import Documentary Credits' , minID:'min_1', maxID:'max_1', allocID:'alloc_1',rowID:'row_1'},
 //   {rowTitle: 'Import Bill', minID:'min_2', maxID:'max_2', allocID:'alloc_2', rowID:'row_2'},
 //   {rowTitle: 'Import Shipping Guarantee', minID:'min_3', maxID:'max_3', allocID:'alloc_3',rowID:'row_3'},
 //   {rowTitle: 'Import Loan', minID:'min_4', maxID:'max_4', allocID:'alloc_4',rowID:'row_4'},
 //   {rowTitle: 'Import Marginal Deposit', minID:'min_5', maxID:'max_5', allocID:'alloc_5',rowID:'row_5'},
 //   {rowTitle: 'Export Bill', minID:'min_6', maxID:'max_6', allocID:'alloc_6',rowID:'row_6'},
 //   {rowTitle: 'Export Loan', minID:'min_7', maxID:'max_7', allocID:'alloc_7',rowID:'row_7'},
 //   {rowTitle: 'Export Marginal Deposit', minID:'min_8', maxID:'max_8', allocID:'alloc_8',rowID:'row_8'}
 // ];
 const myData = this.state.tableData.map((data, i) => {
     return (
       <SerialNoTextFields
         key={i}
         rowTitle={data.rowTitle}
         minID ={data.minID}
         maxID ={data.maxID}
         allocID ={data.allocID}
         rowID = {data.rowID}
         nameForMinval="min_val"
         nameForMaxval ="max_val"
         nameForAllocNo ="alloc_no"
         minValue ={this.state.minValue}
         maxval ={this.state.maxValue}
         allocNo = {this.state.allocNo}
         handleChange ={this.handleChangeOnVal}
       />
     );
   });
    return (
<div>
  <table className="table">
      <thead>
          <tr>
            <th>Product Type</th>
            <th>Min Value</th>
            <th>Max Value</th>
            <th>Last No. Alloc</th>
          </tr>
      </thead>
      <tbody>
        {myData}
      </tbody>
  </table>

    <div><button className="btn btn-primary" onClick={this.onSubmitCreateSerialNo}>Submit</button></div>
</div>
    );
  }
}
